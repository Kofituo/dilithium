var searchIndex = JSON.parse('{\
"dilithium":{"doc":"","t":[0,0,0,0,0,0,0,0,0,0,0,0,17,3,17,17,17,6,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,17,3,17,17,17,6,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,17,3,17,17,17,6,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,17,3,17,17,17,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,12,5,12,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,17,17,5,5,0,0,0,17,17,17,5,5,5,5,5,5,17,17,17,5,5,5,5,5,5,17,17,17,5,5,5,5,5,5,17,17,17,17,17,17,17,17,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,5,5,11,11,5,5,11,11,12,11,11,11,5,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,5,11,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,17,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,12,12,11,11,17,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,12,12,11,11,17,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,12,12,11,11,17,5,5,5,0,0,0,5,17,5,5,5,17,5,5,5,17,5,5,5,0,0,0,17,17,5,5,5,5,17,17,5,5,5,5,17,17,5,5,5,5],"n":["dilithium2","dilithium3","dilithium5","fips202","ntt","packing","params","poly","polyvec","reduce","rounding","sign","KEYPAIRBYTES","Keypair","PUBLICKEYBYTES","SECRETKEYBYTES","SIGNBYTES","Signature","borrow","borrow_mut","from","from_bytes","generate","into","public","secret","sign","to_bytes","try_from","try_into","type_id","verify","vzip","KEYPAIRBYTES","Keypair","PUBLICKEYBYTES","SECRETKEYBYTES","SIGNBYTES","Signature","borrow","borrow_mut","from","from_bytes","generate","into","public","secret","sign","to_bytes","try_from","try_into","type_id","verify","vzip","KEYPAIRBYTES","Keypair","PUBLICKEYBYTES","SECRETKEYBYTES","SIGNBYTES","Signature","borrow","borrow_mut","from","from_bytes","generate","into","public","secret","sign","to_bytes","try_from","try_into","type_id","verify","vzip","KECCAKF_ROUNDCONSTANTS","KeccakState","NROUNDS","SHAKE128_RATE","SHAKE256_RATE","borrow","borrow_mut","clone","clone_into","default","from","init","into","keccak_absorb","keccak_absorb_once","keccak_finalize","keccak_squeeze","keccak_squeezeblocks","keccakf1600_statepermute","load64","pos","rol","s","shake128_absorb","shake128_finalize","shake128_squeezeblocks","shake128_stream_init","shake256","shake256_absorb","shake256_absorb_once","shake256_finalize","shake256_squeeze","shake256_squeezeblocks","shake256_stream_init","store64","to_owned","try_from","try_into","type_id","vzip","N","ZETAS","invntt_tomont","ntt","lvl2","lvl3","lvl5","K","L","N","pack_pk","pack_sig","pack_sk","unpack_pk","unpack_sig","unpack_sk","K","L","N","pack_pk","pack_sig","pack_sk","unpack_pk","unpack_sig","unpack_sk","K","L","N","pack_pk","pack_sig","pack_sk","unpack_pk","unpack_sig","unpack_sk","CRHBYTES","D","N","POLYT0_PACKEDBYTES","POLYT1_PACKEDBYTES","Q","R","SEEDBYTES","lvl2","lvl3","lvl5","BETA","CHALLENGE_ENTROPY","ETA","GAMMA1","GAMMA2","K","L","OMEGA","POLYETA_PACKEDBYTES","POLYVECH_PACKEDBYTES","POLYW1_PACKEDBYTES","POLYZ_PACKEDBYTES","PUBLICKEYBYTES","SECRETKEYBYTES","SIGNBYTES","TAU","BETA","CHALLENGE_ENTROPY","ETA","GAMMA1","GAMMA2","K","L","OMEGA","POLYETA_PACKEDBYTES","POLYVECH_PACKEDBYTES","POLYW1_PACKEDBYTES","POLYZ_PACKEDBYTES","PUBLICKEYBYTES","SECRETKEYBYTES","SIGNBYTES","TAU","BETA","CHALLENGE_ENTROPY","ETA","GAMMA1","GAMMA2","K","L","OMEGA","POLYETA_PACKEDBYTES","POLYVECH_PACKEDBYTES","POLYW1_PACKEDBYTES","POLYZ_PACKEDBYTES","PUBLICKEYBYTES","SECRETKEYBYTES","SIGNBYTES","TAU","D_SHL","N","Poly","UNIFORM_NBLOCKS","add","add_ip","borrow","borrow_mut","caddq","chknorm","clone","clone_into","coeffs","default","from","into","invntt_tomont","lvl2","lvl3","lvl5","ntt","pointwise_montgomery","power2round","reduce","rej_uniform","shiftl","sub","sub_ip","t0_pack","t0_unpack","t1_pack","t1_unpack","to_owned","try_from","try_into","type_id","uniform","vzip","UNIFORM_ETA_NBLOCKS","UNIFORM_GAMMA1_NBLOCKS","challenge","decompose","eta_pack","eta_unpack","make_hint","rej_eta","uniform_eta","uniform_gamma1","use_hint","use_hint_ip","w1_pack","z_pack","z_unpack","UNIFORM_ETA_NBLOCKS","UNIFORM_GAMMA1_NBLOCKS","challenge","decompose","eta_pack","eta_unpack","make_hint","rej_eta","uniform_eta","uniform_gamma1","use_hint","use_hint_ip","w1_pack","z_pack","z_unpack","UNIFORM_ETA_NBLOCKS","UNIFORM_GAMMA1_NBLOCKS","challenge","decompose","eta_pack","eta_unpack","make_hint","rej_eta","uniform_eta","uniform_gamma1","use_hint","use_hint_ip","w1_pack","z_pack","z_unpack","lvl2","lvl3","lvl5","K","L","Polyveck","Polyvecl","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","from","from","into","into","k_add","k_caddq","k_chknorm","k_decompose","k_invntt_tomont","k_make_hint","k_ntt","k_pack_w1","k_pointwise_poly_montgomery","k_power2round","k_reduce","k_shiftl","k_sub","k_uniform_eta","k_use_hint","l_add","l_chknorm","l_invntt_tomont","l_ntt","l_pointwise_acc_montgomery","l_pointwise_poly_montgomery","l_reduce","l_uniform_eta","l_uniform_gamma1","matrix_expand","matrix_pointwise_montgomery","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vec","vec","vzip","vzip","K","L","Polyveck","Polyvecl","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","from","from","into","into","k_add","k_caddq","k_chknorm","k_decompose","k_invntt_tomont","k_make_hint","k_ntt","k_pack_w1","k_pointwise_poly_montgomery","k_power2round","k_reduce","k_shiftl","k_sub","k_uniform_eta","k_use_hint","l_add","l_chknorm","l_invntt_tomont","l_ntt","l_pointwise_acc_montgomery","l_pointwise_poly_montgomery","l_reduce","l_uniform_eta","l_uniform_gamma1","matrix_expand","matrix_pointwise_montgomery","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vec","vec","vzip","vzip","K","L","Polyveck","Polyvecl","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","from","from","into","into","k_add","k_caddq","k_chknorm","k_decompose","k_invntt_tomont","k_make_hint","k_ntt","k_pack_w1","k_pointwise_poly_montgomery","k_power2round","k_reduce","k_shiftl","k_sub","k_uniform_eta","k_use_hint","l_add","l_chknorm","l_invntt_tomont","l_ntt","l_pointwise_acc_montgomery","l_pointwise_poly_montgomery","l_reduce","l_uniform_eta","l_uniform_gamma1","matrix_expand","matrix_pointwise_montgomery","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vec","vec","vzip","vzip","Q_INV","caddq","montgomery_reduce","reduce32","lvl2","lvl3","lvl5","power2round","GAMMA2","decompose","make_hint","use_hint","GAMMA2","decompose","make_hint","use_hint","GAMMA2","decompose","make_hint","use_hint","lvl2","lvl3","lvl5","K","L","keypair","random_bytes","signature","verify","K","L","keypair","random_bytes","signature","verify","K","L","keypair","random_bytes","signature","verify"],"q":["dilithium","","","","","","","","","","","","dilithium::dilithium2","","","","","","","","","","","","","","","","","","","","","dilithium::dilithium3","","","","","","","","","","","","","","","","","","","","","dilithium::dilithium5","","","","","","","","","","","","","","","","","","","","","dilithium::fips202","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dilithium::ntt","","","","dilithium::packing","","","dilithium::packing::lvl2","","","","","","","","","dilithium::packing::lvl3","","","","","","","","","dilithium::packing::lvl5","","","","","","","","","dilithium::params","","","","","","","","","","","dilithium::params::lvl2","","","","","","","","","","","","","","","","dilithium::params::lvl3","","","","","","","","","","","","","","","","dilithium::params::lvl5","","","","","","","","","","","","","","","","dilithium::poly","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dilithium::poly::lvl2","","","","","","","","","","","","","","","dilithium::poly::lvl3","","","","","","","","","","","","","","","dilithium::poly::lvl5","","","","","","","","","","","","","","","dilithium::polyvec","","","dilithium::polyvec::lvl2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dilithium::polyvec::lvl3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dilithium::polyvec::lvl5","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dilithium::reduce","","","","dilithium::rounding","","","","dilithium::rounding::lvl2","","","","dilithium::rounding::lvl3","","","","dilithium::rounding::lvl5","","","","dilithium::sign","","","dilithium::sign::lvl2","","","","","","dilithium::sign::lvl3","","","","","","dilithium::sign::lvl5","","","","",""],"d":["","","","","","","","","","","","","","A pair of private and public keys.","","","","","","","Returns the argument unchanged.","Create a Keypair from bytes.","Generate a Keypair instance.","Calls <code>U::from(self)</code>.","","","Compute a signature for a given message.","Convert a Keypair to a bytes array.","","","","Verify a signature for a given message with a public key.","","","A pair of private and public keys.","","","","","","","Returns the argument unchanged.","Create a Keypair from bytes.","Generate a Keypair instance.","Calls <code>U::from(self)</code>.","","","Compute a signature for a given message.","Convert a Keypair to a bytes array.","","","","Verify a signature for a given message with a public key.","","","A pair of private and public keys.","","","","","","","Returns the argument unchanged.","Create a Keypair from bytes.","Generate a Keypair instance.","Calls <code>U::from(self)</code>.","","","Compute a signature for a given message.","Convert a Keypair to a bytes array.","","","","Verify a signature for a given message with a public key.","","Keccak round constants","1600-bit state of the algorithm, with an index of curent …","","","","","","","","","Returns the argument unchanged.","Set the state to the initial form.","Calls <code>U::from(self)</code>.","Absorb step of Keccak; incremental.","Absorb step of Keccak; non-incremental, starts by zeroeing …","Finalize absorb step.","Squeeze step of Keccak. Squeezes arbitratrily many bytes. …","Squeeze step of Keccak. Squeezes full blocks of r bytes …","The Keccak F1600 Permutation","Load 8 bytes into uint64_t in little-endian order","","No rolling defined in the language so got to do it …","","Absorb step of the SHAKE128 XOF; incremental.","Finalize absorb step of the SHAKE128 XOF.","Squeeze step of SHAKE128 XOF. Squeezes full blocks of …","","SHAKE256 XOF with non-incremental API","Absorb step of the SHAKE256 XOF; incremental.","Initialize, absorb into and finalize SHAKE256 XOF; …","Finalize absorb step of the SHAKE256 XOF.","Squeeze step of SHAKE256 XOF. Squeezes arbitraily many …","Squeeze step of SHAKE256 XOF. Squeezes full blocks of …","","Store a 64-bit integer to array of 8 bytes in …","","","","","","A much needed cast.","Precomputed roots of unity.","Inverse NTT and multiplication by Montgomery factor 2^32. …","Forward NTT, in-place. No modular reduction is performed …","","","","","","","Bit-pack public key pk = (rho, t1).","Bit-pack signature sig = (c, z, h).","Bit-pack secret key sk = (rho, key, tr, s1, s2, t0).","Unpack public key pk = (rho, t1).","Unpack signature sig = (z, h, c).","Unpack secret key sk = (rho, key, tr, s1, s2, t0).","","","","Bit-pack public key pk = (rho, t1).","Bit-pack signature sig = (c, z, h).","Bit-pack secret key sk = (rho, key, tr, s1, s2, t0).","Unpack public key pk = (rho, t1).","Unpack signature sig = (z, h, c).","Unpack secret key sk = (rho, key, tr, s1, s2, t0).","","","","Bit-pack public key pk = (rho, t1).","Bit-pack signature sig = (c, z, h).","Bit-pack secret key sk = (rho, key, tr, s1, s2, t0).","Unpack public key pk = (rho, t1).","Unpack signature sig = (z, h, c).","Unpack secret key sk = (rho, key, tr, s1, s2, t0).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a polynomial","","Add polynomials. No modular reduction is performed.","Add polynomials in place. No modular reduction is …","","","For all coefficients of in/out polynomial add Q if …","Check infinity norm of polynomial against given bound. …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Inplace inverse NTT and multiplication by 2^{32}. Input …","","","","Inplace forward NTT. Coefficients can grow by 8*Q in …","Pointwise multiplication of polynomials in NTT domain …","For all coefficients c of the input polynomial, compute …","Inplace reduction of all coefficients of polynomial to …","Sample uniformly random coefficients in [0, Q-1] by …","Multiply polynomial by 2^D without modular reduction. …","Subtract polynomials. No modular reduction is performed.","Subtract polynomials in place. No modular reduction is …","Bit-pack polynomial t0 with coefficients in [-2^{D-1}, …","Unpack polynomial t0 with coefficients in ]-2^{D-1}, …","Bit-pack polynomial t1 with coefficients fitting in 10 …","Unpack polynomial t1 with 9-bit coefficients. Output …","","","","","Sample polynomial with uniformly random coefficients in […","","","","Implementation of H. Samples polynomial with TAU nonzero …","For all coefficients c of the input polynomial, compute …","Bit-pack polynomial with coefficients in [-ETA,ETA]. Input …","Unpack polynomial with coefficients in [-ETA,ETA].","Compute hint polynomial, the coefficients of which …","Sample uniformly random coefficients in [-ETA, ETA] by …","Sample polynomial with uniformly random coefficients in […","Sample polynomial with uniformly random coefficients in […","Use hint polynomial to correct the high bits of a …","Use hint polynomial to correct the high bits of a …","Bit-pack polynomial w1 with coefficients in [0, 15]. Input …","Bit-pack polynomial z with coefficients in [-(GAMMA1 - 1), …","Unpack polynomial z with coefficients in [-(GAMMA1 - 1), …","","","Implementation of H. Samples polynomial with TAU nonzero …","For all coefficients c of the input polynomial, compute …","Bit-pack polynomial with coefficients in [-ETA,ETA]. Input …","Unpack polynomial with coefficients in [-ETA,ETA].","Compute hint polynomial, the coefficients of which …","Sample uniformly random coefficients in [-ETA, ETA] by …","Sample polynomial with uniformly random coefficients in […","Sample polynomial with uniformly random coefficients in […","Use hint polynomial to correct the high bits of a …","Use hint polynomial to correct the high bits of a …","Bit-pack polynomial w1 with coefficients in [0, 15]. Input …","Bit-pack polynomial z with coefficients in [-(GAMMA1 - 1), …","Unpack polynomial z with coefficients in [-(GAMMA1 - 1), …","","","Implementation of H. Samples polynomial with TAU nonzero …","For all coefficients c of the input polynomial, compute …","Bit-pack polynomial with coefficients in [-ETA,ETA]. Input …","Unpack polynomial with coefficients in [-ETA,ETA].","Compute hint polynomial, the coefficients of which …","Sample uniformly random coefficients in [-ETA, ETA] by …","Sample polynomial with uniformly random coefficients in […","Sample polynomial with uniformly random coefficients in […","Use hint polynomial to correct the high bits of a …","Use hint polynomial to correct the high bits of a …","Bit-pack polynomial w1 with coefficients in [0, 15]. Input …","Bit-pack polynomial z with coefficients in [-(GAMMA1 - 1), …","Unpack polynomial z with coefficients in [-(GAMMA1 - 1), …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Add vectors of polynomials of length K. No modular …","For all coefficients of polynomials in vector of length K …","Check infinity norm of polynomials in vector of length K. …","","Inverse NTT and multiplication by 2^{32} of polynomials in …","","Forward NTT of all polynomials in vector of length K. …","","","For all coefficients a of polynomials in vector of length …","Reduce coefficients of polynomials in vector of length K …","Multiply vector of polynomials of Length K by 2^D without …","Subtract vectors of polynomials of length K. Assumes …","","","Add vectors of polynomials of length L. No modular …","","","Forward NTT of all polynomials in vector of length L. …","Pointwise multiply vectors of polynomials of length L, …","","","","","Implementation of ExpandA. Generates matrix A with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Add vectors of polynomials of length K. No modular …","For all coefficients of polynomials in vector of length K …","Check infinity norm of polynomials in vector of length K. …","","Inverse NTT and multiplication by 2^{32} of polynomials in …","","Forward NTT of all polynomials in vector of length K. …","","","For all coefficients a of polynomials in vector of length …","Reduce coefficients of polynomials in vector of length K …","Multiply vector of polynomials of Length K by 2^D without …","Subtract vectors of polynomials of length K. Assumes …","","","Add vectors of polynomials of length L. No modular …","","","Forward NTT of all polynomials in vector of length L. …","Pointwise multiply vectors of polynomials of length L, …","","","","","Implementation of ExpandA. Generates matrix A with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Add vectors of polynomials of length K. No modular …","For all coefficients of polynomials in vector of length K …","Check infinity norm of polynomials in vector of length K. …","","Inverse NTT and multiplication by 2^{32} of polynomials in …","","Forward NTT of all polynomials in vector of length K. …","","","For all coefficients a of polynomials in vector of length …","Reduce coefficients of polynomials in vector of length K …","Multiply vector of polynomials of Length K by 2^D without …","Subtract vectors of polynomials of length K. Assumes …","","","Add vectors of polynomials of length L. No modular …","","","Forward NTT of all polynomials in vector of length L. …","Pointwise multiply vectors of polynomials of length L, …","","","","","Implementation of ExpandA. Generates matrix A with …","","","","","","","","","","","","","","","Add Q if input coefficient is negative.","For integer a with -2^{31} * Q &lt;= a &lt;= 2^31 * Q, compute r …","For finite field element a with a &lt;= 2^{31} - 2^{22} - 1, …","","","","For finite field element a, compute high and low bits a0, …","","For finite field element a, compute high and low bits a0, …","Compute hint bit indicating whether the low bits of the …","Correct high bits according to hint.","","For finite field element a, compute high and low bits a0, …","Compute hint bit indicating whether the low bits of the …","Correct high bits according to hint.","","For finite field element a, compute high and low bits a0, …","Compute hint bit indicating whether the low bits of the …","Correct high bits according to hint.","","","","","","Generate public and private key.","Generate random bytes.","Compute a signature for a given message from a private …","Verify a signature for a given message with a public key.","","","Generate public and private key.","Generate random bytes.","Compute a signature for a given message from a private …","Verify a signature for a given message with a public key.","","","Generate public and private key.","Generate random bytes.","Compute a signature for a given message from a private …","Verify a signature for a given message with a public key."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,11,0,11,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,0,0,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,16,17,16,17,16,17,16,17,16,17,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,16,17,16,17,16,17,16,17,16,17,0,0,0,0,18,19,18,19,18,19,18,19,18,19,18,19,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,19,18,19,18,19,18,19,18,19,18,19,0,0,0,0,20,21,20,21,20,21,20,21,20,21,20,21,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,20,21,20,21,20,21,20,21,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[],1],[2,1],[[]],0,0,[1,3],[1],[[],4],[[],4],[[],5],[1,6],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[],7],[2,7],[[]],0,0,[7,8],[7],[[],4],[[],4],[[],5],[7,6],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[],9],[2,9],[[]],0,0,[9,10],[9],[[],4],[[],4],[[],5],[9,6],[[]],0,0,0,0,0,[[]],[[]],[11,11],[[]],[[],11],[[]],[11],[[]],[[11,12,12]],[[12,12,13]],[[12,12,13]],[[12,12,12],12],[[12,12]],[[]],[[],14],0,[[14,14],14],0,[[11,12]],[11],[[12,11]],[[11,15]],[[12,12]],[[11,12]],[[11,12]],[11],[[12,11]],[[12,11]],[[11,15]],[14],[[]],[[],4],[[],4],[[],5],[[]],0,0,[[]],[[]],0,0,0,0,0,0,[16],[[2,17,16]],[[16,17,16]],[16],[[17,16],6],[[16,17,16]],0,0,0,[18],[[2,19,18]],[[18,19,18]],[18],[[19,18],6],[[18,19,18]],0,0,0,[20],[[2,21,20]],[[20,21,20]],[20],[[21,20],6],[[20,21,20]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[22,22],22],[[22,22]],[[]],[[]],[22],[[22,23],23],[22,22],[[]],0,[[],22],[[]],[[]],[22],0,0,0,[22],[[22,22,22]],[[22,22]],[22],[[12,12],12],[22],[[22,22],22],[[22,22]],[22],[22],[22],[22],[[]],[[],4],[[],4],[[],5],[[22,15]],[[]],0,0,[22],[[22,22]],[22],[22],[[22,22,22],23],[[12,12],24],[[22,15]],[[22,15]],[[22,22]],[[22,22]],[22],[22],[22],0,0,[22],[[22,22]],[22],[22],[[22,22,22],23],[[12,12],12],[[22,15]],[[22,15]],[[22,22]],[[22,22]],[22],[22],[22],0,0,[22],[[22,22]],[22],[22],[[22,22,22],23],[[12,12],12],[[22,15]],[[22,15]],[[22,22]],[[22,22]],[22],[22],[22],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[16,16],[17,17],[[]],[[]],[[],16],[[],17],[[]],[[]],[[]],[[]],[[16,16]],[16],[[16,23],13],[[16,16]],[16],[[16,16,16],23],[16],[16],[[16,22,16]],[[16,16]],[16],[16],[[16,16]],[[16,15]],[[16,16]],[[17,17]],[[17,23],13],[17],[17],[[22,17,17]],[[17,22,17]],[17],[[17,15]],[[17,15]],[[]],[[16,17]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],0,0,[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[18,18],[19,19],[[]],[[]],[[],18],[[],19],[[]],[[]],[[]],[[]],[[18,18]],[18],[[18,23],13],[[18,18]],[18],[[18,18,18],23],[18],[18],[[18,22,18]],[[18,18]],[18],[18],[[18,18]],[[18,15]],[[18,18]],[[19,19]],[[19,23],13],[19],[19],[[22,19,19]],[[19,22,19]],[19],[[19,15]],[[19,15]],[[]],[[18,19]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],0,0,[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[20,20],[21,21],[[]],[[]],[[],20],[[],21],[[]],[[]],[[]],[[]],[[20,20]],[20],[[20,23],13],[[20,20]],[20],[[20,20,20],23],[20],[20],[[20,22,20]],[[20,20]],[20],[20],[[20,20]],[[20,15]],[[20,20]],[[21,21]],[[21,23],13],[21],[21],[[22,21,21]],[[21,22,21]],[21],[[21,15]],[[21,15]],[[]],[[20,21]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],0,0,[[]],[[]],0,[23,23],[25,23],[23,23],0,0,0,[23],0,[23],[[23,23],23],[[23,23],23],0,[23],[[23,23],23],[[23,23],23],0,[23],[[23,23],23],[[23,23],23],0,0,0,0,0,[2],[12],[6],[[],6],0,0,[2],[12],[6],[[],6],0,0,[2],[12],[6],[[],6]],"p":[[3,"Keypair"],[4,"Option"],[6,"Signature"],[4,"Result"],[3,"TypeId"],[15,"bool"],[3,"Keypair"],[6,"Signature"],[3,"Keypair"],[6,"Signature"],[3,"KeccakState"],[15,"usize"],[15,"u8"],[15,"u64"],[15,"u16"],[3,"Polyveck"],[3,"Polyvecl"],[3,"Polyveck"],[3,"Polyvecl"],[3,"Polyveck"],[3,"Polyvecl"],[3,"Poly"],[15,"i32"],[15,"u32"],[15,"i64"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
