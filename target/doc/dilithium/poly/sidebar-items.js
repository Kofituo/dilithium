window.SIDEBAR_ITEMS = {"constant":[["D_SHL",""],["N",""],["UNIFORM_NBLOCKS",""]],"fn":[["add","Add polynomials. No modular reduction is performed."],["add_ip","Add polynomials in place. No modular reduction is performed."],["caddq","For all coefficients of in/out polynomial add Q if coefficient is negative."],["chknorm","Check infinity norm of polynomial against given bound. Assumes input coefficients were reduced by reduce32()."],["invntt_tomont","Inplace inverse NTT and multiplication by 2^{32}. Input coefficients need to be less than Q in absolute value and output coefficients are again bounded by Q."],["ntt","Inplace forward NTT. Coefficients can grow by 8*Q in absolute value."],["pointwise_montgomery","Pointwise multiplication of polynomials in NTT domain representation and multiplication of resulting polynomial by 2^{-32}."],["power2round","For all coefficients c of the input polynomial, compute c0, c1 such that c mod Q = c1*2^D + c0 with -2^{D-1} < c0 <= 2^{D-1}. Assumes coefficients to be standard representatives."],["reduce","Inplace reduction of all coefficients of polynomial to representative in [-6283009,6283007]."],["rej_uniform","Sample uniformly random coefficients in [0, Q-1] by performing rejection sampling on array of random bytes."],["shiftl","Multiply polynomial by 2^D without modular reduction. Assumes input coefficients to be less than 2^{31-D} in absolute value."],["sub","Subtract polynomials. No modular reduction is performed."],["sub_ip","Subtract polynomials in place. No modular reduction is performed."],["t0_pack","Bit-pack polynomial t0 with coefficients in [-2^{D-1}, 2^{D-1}]."],["t0_unpack","Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}]. Output coefficients lie in ]Q-2^{D-1},Q+2^{D-1}]."],["t1_pack","Bit-pack polynomial t1 with coefficients fitting in 10 bits. Input coefficients are assumed to be standard representatives."],["t1_unpack","Unpack polynomial t1 with 9-bit coefficients. Output coefficients are standard representatives."],["uniform","Sample polynomial with uniformly random coefficients in [0, Q-1] by performing rejection sampling using the output stream of SHAKE128(seed|nonce)."]],"mod":[["lvl2",""],["lvl3",""],["lvl5",""]],"struct":[["Poly","Represents a polynomial"]]};